/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import PWA from "plugins/pwa";
import { getLocalForage, setLocalForage } from "helpers/storage.helper";
import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith(".png") ||
      url.pathname.endsWith(".jpg") ||
      url.pathname.endsWith(".jpeg") ||
      url.pathname.endsWith(".ico")),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images-v" + process.env.REACT_APP_VERSION,
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", event => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const pwa = new PWA(self.registration);

const onCacheResponse = async (event: FetchEvent, caches: CacheStorage): Promise<Response> => {
  const response = await fetch(event.request);
  if (caches) {
    const cachedResponse = await caches.match(event.request);
    const responseClone = response.clone();
    const cache = await caches.open("response-cache-storage-v" + process.env.REACT_APP_VERSION);
    if (cachedResponse) cache.delete(event.request);
    if (
      event.request.method === "GET" &&
      !event.request.url.startsWith("chrome-extension") &&
      !event.request.url.startsWith("https://www.google-analytics.com") &&
      !event.request.url.startsWith("https://www.google.com.vn/ads") &&
      !event.request.url.startsWith("https://www.googletagmanager.com")
    ) {
      cache.put(event.request, responseClone);
    }
  }

  return response;
};

const onUpdateApplication = async () => {
  const lastUpdateTimeKey = "last-updated-time-key";
  const lastUpdateTime = await getLocalForage<number>(lastUpdateTimeKey);
  if (Date.now() - (lastUpdateTime || 0) >= 1 * 60 * 1000) {
    const versionResponse = await fetch("/version.json?t=" + Date.now());
    const versionJson = await versionResponse.json();
    const version = versionJson?.version || process.env.REACT_APP_VERSION;
    await setLocalForage<number>(lastUpdateTimeKey, Date.now());
    if (version !== process.env.REACT_APP_VERSION) {
      self.registration.update();
    }
  }
};

self.addEventListener("fetch", event => {
  // Network first
  event.respondWith(
    (async caches => {
      try {
        await onUpdateApplication();
        return onCacheResponse(event, caches);
      } catch (error) {
        await onUpdateApplication();
        if (caches) {
          const cachedResponse = await caches.match(event.request);
          if (cachedResponse) return cachedResponse;
        }
        throw error;
      }
    })(caches),
  );
});

self.addEventListener("sync", (event: any) => {
  Object.entries(pwa.syncEvents).forEach(([tag, callback]) => {
    if (event.tag === "SYNC_" + tag) {
      event.waitUntil(
        (async () => {
          let localForageData = await getLocalForage<Array<any>>("SYNC_" + tag);
          let data: any = localForageData?.shift() || null;
          if (!localForageData) localForageData = [];
          await setLocalForage<Array<any>>("SYNC_" + tag, localForageData);
          await callback.onSupported(self, event, data);
        })(),
      );
    }
  });
});

self.addEventListener("periodicsync", (event: any) => {
  Object.entries(pwa.periodSyncEvents).forEach(([tag, callback]) => {
    if (event.tag === "PERIOD_SYNC_" + tag) {
      event.waitUntil(
        (async () => {
          await callback.onSupported(self, event);
        })(),
      );
    }
  });
});

self.addEventListener("activate", event => {
  const whiteList: string[] = ["response-cache-storage-v" + process.env.REACT_APP_VERSION];

  // Clear caches while new version updated
  event.waitUntil(
    (async caches => {
      self.clients.claim();
      if (caches) {
        await self.clients.claim();
        const keys = await caches.keys();
        keys.filter(key => !whiteList.includes(key)).forEach(key => caches.delete(key));
      }

      return [];
    })(caches),
  );
});

self.addEventListener("install", event => {
  // Forces a service worker to activate immediately
  self.skipWaiting();
});

self.addEventListener("notificationclick", function (event) {
  // For root applications: just change "'./'" to "'/'"
  // Very important having the last forward slash on "new URL('./', location)..."
  const rootUrl = new URL("./", self.location.origin).href;
  event.notification.close();
  event.waitUntil(
    self.clients.matchAll().then(matchedClients => {
      for (let client of matchedClients) {
        if (client.url.indexOf(rootUrl) >= 0) {
          if ("focus" in client && typeof client.focus === "function") {
            return client.focus();
          }
        }
      }

      return self.clients.openWindow(rootUrl).then(client => {
        if (client) client.focus();
      });
    }),
  );
});
